#! /usr/bin/env node

function iter$__(a){ let v; return a ? ((v=a.toIterable) ? v.call(a) : a) : a; };

/*body*/
// USER CONFIG

let extensions = [
	".mp4",
	".mov",
	".avi",
	".mkv"
];

let proxy_folder = "/BL_proxy";

let perc = 25;
let frac = 4;

// END USER CONFIG

let p = console.log;
let {mkdirSync: mkdirSync,accessSync: accessSync,readdirSync: readdirSync} = require('fs'/*$path$*/);
let {extname: extname,join: join} = require('path'/*$path$*/);
let {spawnSync: spawnSync} = require('child_process'/*$path$*/);

let paths = [];
if (process.argv.length >= 3) {
	
	filenames = process.argv.slice(2);
	for (let $1 = 0, $2 = iter$__(filenames), $4 = $2.length; $1 < $4; $1++) {
		let filename = $2[$1];
		try {
			
			accessSync(filename);
			paths.push(filename);
		} catch ($3) {
			
			p(("\x1b[31mFile doesn't exist, quitting:\x1b[0m '" + filename + "'"));
			process.exit();
		};
	};
} else {
	
	for (let $5 = 0, $6 = iter$__(readdirSync(".")), $7 = $6.length; $5 < $7; $5++) {
		let filename = $6[$5];
		if (extensions.includes(extname(filename).trim().toLowerCase())) {
			
			paths.push(filename);
		};
	};
};

for (let index = 0, $8 = iter$__(paths), $9 = $8.length; index < $9; index++) {
	let inpath = $8[index];
	p(("Creating proxy \x1b[32m" + (index + 1) + "/" + (paths.length) + "\x1b[0m: " + inpath));
	
	outdir = join(proxy_folder,inpath);
	mkdirSync(outdir,{recursive: true});
	outpath = join(outdir,("proxy_" + perc + ".avi"));
	
	let cmd = 'ffmpeg';
	let args = [
		"-y",
		"-loglevel",
		"error",
		"-stats",
		"-noautorotate",
		"-i",
		inpath,
		"-pix_fmt",
		"yuv420p",
		"-g",
		"1",
		"-sn",
		"-an",
		"-vf",
		("colormatrix=bt601:bt709,scale=iw/" + frac + ":ih/" + frac + ":force_divisible_by=2"),
		"-c:v",
		"libx264",
		"-crf",
		"16",
		"-preset",
		"superfast",
		"-tune",
		"fastdecode",
		outpath
	];
	
	spawnSync(cmd,args,{stdio: 'inherit'});
};
